INDIVIDUAL DEVELOPER (STANDALONE)
       A standalone individual developer does not exchange patches with other people,
       and works alone in a single repository, using the following commands.

       •   git-init(1) to create a new repository.

       •   git-log(1) to see what happened.

       •   git-switch(1) and git-branch(1) to switch branches.

       •   git-add(1) to manage the index file.

       •   git-diff(1) and git-status(1) to see what you are in the middle of doing.

       •   git-commit(1) to advance the current branch.

       •   git-restore(1) to undo changes.

       •   git-merge(1) to merge between local branches.

       •   git-rebase(1) to maintain topic branches.

       •   git-tag(1) to mark a known point

Examples
       Use a tarball as a starting point for a new repository.

               $ tar zxf frotz.tar.gz
               $ cd frotz
               $ git init
               $ git add . (1)
               $ git commit -m "import of frotz source tree."
               $ git tag v2.43 (2)

            1. add everything under the current directory.
            2. make a lightweight, unannotated tag.

       Create a topic branch and develop.

               $ git switch -c alsa-audio (1)
               $ edit/compile/test
               $ git restore curses/ux_audio_oss.c (2)
               $ git add curses/ux_audio_alsa.c (3)
               $ edit/compile/test
               $ git diff HEAD (4)
               $ git commit -a -s (5)
               $ edit/compile/test
               $ git diff HEAD^ (6)
               $ git commit -a --amend (7)
               $ git switch master (8)
               $ git merge alsa-audio (9)
               $ git log --since='3 days ago' (10)
               $ git log v2.43.. curses/ (11)
	1. create a new topic branch.
            2. revert your botched changes in curses/ux_audio_oss.c.
            3. you need to tell Git if you added a new file; removal and
               modification will be caught if you do git commit -a later.
            4. to see what changes you are committing.
            5. commit everything, as you have tested, with your sign-off.
            6. look at all your changes including the previous commit.
            7. amend the previous commit, adding all your new changes, using
               your original message.
            8. switch to the master branch.
            9. merge a topic branch into your master branch.
           10. review commit logs; other forms to limit output can be combined
               and include -10 (to show up to 10 commits), --until=2005-12-10,
               etc.
           11. view only the changes that touch what’s in curses/ directory,
               since v2.43 tag.
